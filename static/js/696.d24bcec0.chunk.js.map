{"version":3,"file":"static/js/696.d24bcec0.chunk.js","mappings":"+YAwBe,SAASA,IACtB,IAAAC,GAA0BC,EAAAA,EAAAA,KAAlBC,EAAKF,EAALE,MAAOC,EAAMH,EAANG,OACfC,GAA4BC,EAAAA,EAAAA,UAAS,CAAEC,OAAO,EAAMC,UAAU,IAAOC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA9DM,EAAOF,EAAA,GAAEG,EAAQH,EAAA,GAClBI,GAAWC,EAAAA,EAAAA,MACjBC,GAA0BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAA/BR,EAAKS,EAAA,GAAEC,EAAQD,EAAA,GACtBE,GAAgCZ,EAAAA,EAAAA,UAAS,IAAGa,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAArCV,EAAQW,EAAA,GAAEC,EAAWD,EAAA,GAEtBE,GAAcC,EAAAA,EAAAA,MAASf,QAEvBgB,GAAiBD,EAAAA,EAAAA,MAASE,IAAI,IAEpCC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLZ,GAASa,EAAAA,EAAAA,KACX,CACF,GAAG,CAACb,IAEJ,IAAMc,EAAqB,SAAAC,GACzB,IAAAC,EAAwBD,EAAEE,cAAlBC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACd,OAAQD,GACN,IAAK,QACHV,EACGY,SAASD,GACTE,MAAK,kBAAMtB,GAAS,SAAAuB,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE5B,OAAO,GAAI,GAAI,IACvD8B,OAAM,kBAAMzB,GAAS,SAAAuB,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE5B,OAAO,GAAK,GAAI,IAC5DU,EAASe,GACT,MACF,IAAK,WACHT,EACGU,SAASD,GACTE,MAAK,kBAAMtB,GAAS,SAAAuB,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE3B,UAAU,GAAI,GAAI,IAC1D6B,OAAM,kBAAMzB,GAAS,SAAAuB,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUD,GAAI,IAAE3B,UAAU,GAAK,GAAI,IAC/DY,EAAYY,GACZ,MACF,QACE,MAAM,IAAIM,MAAM,0BAEtB,EAwBA,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CAACC,UAAU,OAAOC,SAAS,KAAIC,SAAA,EACvCJ,EAAAA,EAAAA,MAACK,EAAAA,EAAG,CACFC,GAAI,CACFC,UAAW,EACXC,QAAS,OACTC,cAAe,SACfC,WAAY,UACZN,SAAA,EAEFO,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACN,GAAI,CAAEO,EAAG,EAAGC,QAAS,kBAAmBV,SAC7CvC,GACC8C,EAAAA,EAAAA,KAACI,EAAAA,EAAgB,CAACC,KAAM,GAAIC,MAAM,aAElCN,EAAAA,EAAAA,KAACO,EAAAA,EAAgB,OAGrBP,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACjB,UAAU,KAAKkB,QAAQ,KAAIhB,SAAC,aAGxCJ,EAAAA,EAAAA,MAACK,EAAAA,EAAG,CACFH,UAAU,OACVmB,SA5Cc,SAAAhC,GAEpB,GADAA,EAAEiC,iBACGlD,EAAQJ,MAMb,GAAKI,EAAQH,SAAb,CAMA,IAAMsD,EAAUlC,EAAEmC,OAAOC,SACnBC,EAAO,CACX1D,MAAOuD,EAAQvD,MAAMyB,MACrBxB,SAAUsD,EAAQtD,SAASwB,OAE7BnB,GAASqD,EAAAA,EAAAA,IAAMD,GANf,MAJEE,EAAAA,EAAAA,IAAgB,oCAAqC,CACnDR,QAAS,eAPXQ,EAAAA,EAAAA,IAAgB,iCAAkC,CAChDR,QAAS,SAgBf,EAyBQS,YAAU,EACVvB,GAAI,CAAEwB,GAAI,GAAI1B,SAAA,EAEdO,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRC,SAAU5C,EACV6C,KAAK,QACLxC,MAAOzB,EACPJ,OAAQQ,EAAQJ,MAChBkE,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,GAAG,QACHC,MAAM,gBACN9C,KAAK,QACL+C,aAAa,QACbC,WAAS,KAEX7B,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRC,SAAU5C,EACVK,MAAOxB,EACPL,OAAQQ,EAAQH,SAChBwE,MAAM,8CACNP,OAAO,SACPC,UAAQ,EACRC,WAAS,EACT5C,KAAK,WACL8C,MAAM,WACNL,KAAK,WACLI,GAAG,WACHE,aAAa,sBAEf5B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CACLT,KAAK,SACLG,WAAS,EACThB,QAAQ,YACRuB,SAAU9E,EACVyC,GAAI,CAAEwB,GAAI,EAAGc,GAAI,GAAIxC,SACtB,aAGDO,EAAAA,EAAAA,KAACkC,EAAAA,GAAI,CAACC,WAAS,EAACC,eAAe,WAAU3C,UACvCO,EAAAA,EAAAA,KAACkC,EAAAA,GAAI,CAACG,MAAI,EAAA5C,UACRO,EAAAA,EAAAA,KAACsC,EAAAA,EAAI,CAAC7B,QAAQ,QAAQlB,UAAWgD,EAAAA,GAAWC,GAAG,YAAW/C,SACvD,6CAMVxC,IACC+C,EAAAA,EAAAA,KAACyC,EAAAA,EAAK,CAACC,SAAS,QAAOjD,SACV,kBAAVxC,EACG,yDACAA,MAKd,C","sources":["components/pages/LoginPage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link as RouteLink } from 'react-router-dom';\nimport { string } from 'yup';\nimport { enqueueSnackbar } from 'notistack';\n\nimport {\n  Container,\n  Avatar,\n  Typography,\n  TextField,\n  Box,\n  Button,\n  Grid,\n  Link,\n  Alert,\n  CircularProgress,\n} from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\n\nimport { logIn } from '../../redux/authOperations';\nimport { useAuth } from '../../hooks/useAuth';\nimport { clearError } from '../../redux/authSlice';\n\nexport default function LoginPage() {\n  const { error, isAuth } = useAuth();\n  const [isValid, setValid] = useState({ email: true, password: true });\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const emailSchema = string().email();\n\n  const passwordSchema = string().min(8);\n\n  useEffect(() => {\n    return () => {\n      dispatch(clearError());\n    };\n  }, [dispatch]);\n\n  const inputChangeHandler = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'email':\n        emailSchema\n          .validate(value)\n          .then(() => setValid(prev => ({ ...prev, email: true })))\n          .catch(() => setValid(prev => ({ ...prev, email: false })));\n        setEmail(value);\n        break;\n      case 'password':\n        passwordSchema\n          .validate(value)\n          .then(() => setValid(prev => ({ ...prev, password: true })))\n          .catch(() => setValid(prev => ({ ...prev, password: false })));\n        setPassword(value);\n        break;\n      default:\n        throw new Error('unsupported input name');\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    if (!isValid.email) {\n      enqueueSnackbar('Please enter the correct email', {\n        variant: 'error',\n      });\n      return;\n    }\n    if (!isValid.password) {\n      enqueueSnackbar('Please enter the correct password', {\n        variant: 'error',\n      });\n      return;\n    }\n    const formEls = e.target.elements;\n    const user = {\n      email: formEls.email.value,\n      password: formEls.password.value,\n    };\n    dispatch(logIn(user));\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          {isAuth ? (\n            <CircularProgress size={24} color=\"inherit\" />\n          ) : (\n            <LockOutlinedIcon />\n          )}\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <Box\n          component=\"form\"\n          onSubmit={submitHandler}\n          noValidate\n          sx={{ mt: 1 }}\n        >\n          <TextField\n            onChange={inputChangeHandler}\n            type=\"email\"\n            value={email}\n            error={!isValid.email}\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n          />\n          <TextField\n            onChange={inputChangeHandler}\n            value={password}\n            error={!isValid.password}\n            title=\"Password must contain at least 8 characters\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            disabled={isAuth}\n            sx={{ mt: 3, mb: 2 }}\n          >\n            Sign In\n          </Button>\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <Link variant=\"body2\" component={RouteLink} to=\"/register\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </Box>\n      </Box>\n      {error && (\n        <Alert severity=\"error\">\n          {error !== 'Network Error'\n            ? 'Invalid email or password. Please check and try again.'\n            : error}\n        </Alert>\n      )}\n    </Container>\n  );\n}\n"],"names":["LoginPage","_useAuth","useAuth","error","isAuth","_useState","useState","email","password","_useState2","_slicedToArray","isValid","setValid","dispatch","useDispatch","_useState3","_useState4","setEmail","_useState5","_useState6","setPassword","emailSchema","string","passwordSchema","min","useEffect","clearError","inputChangeHandler","e","_e$currentTarget","currentTarget","name","value","validate","then","prev","_objectSpread","catch","Error","_jsxs","Container","component","maxWidth","children","Box","sx","marginTop","display","flexDirection","alignItems","_jsx","Avatar","m","bgcolor","CircularProgress","size","color","LockOutlinedIcon","Typography","variant","onSubmit","preventDefault","formEls","target","elements","user","logIn","enqueueSnackbar","noValidate","mt","TextField","onChange","type","margin","required","fullWidth","id","label","autoComplete","autoFocus","title","Button","disabled","mb","Grid","container","justifyContent","item","Link","RouteLink","to","Alert","severity"],"sourceRoot":""}