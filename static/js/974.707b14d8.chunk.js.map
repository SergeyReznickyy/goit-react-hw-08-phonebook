{"version":3,"file":"static/js/974.707b14d8.chunk.js","mappings":"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","sources":["components/ContactForm.jsx","components/ContactItem.jsx","components/ContactList.jsx","components/Filter.jsx","components/Dialog.jsx","components/pages/ContactsPage.jsx"],"sourcesContent":["import { useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  Box,\n  TextField,\n  Button,\n  Container,\n  Avatar,\n  CircularProgress,\n} from '@mui/material';\nimport ContactPageIcon from '@mui/icons-material/ContactPage';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { enqueueSnackbar } from 'notistack';\nimport { string } from 'yup';\n\nimport { closeDrawer } from '../redux/modalSlice';\nimport { selectDrawerVariant, selectIdToEdit } from '../redux/selectors';\nimport {\n  useAddContactMutation,\n  useEditContactMutation,\n  useFetchContactsQuery,\n} from '../redux/contactsApi';\n\nexport default function ContactForm() {\n  const drawerVariant = useSelector(selectDrawerVariant);\n  const contactId = useSelector(selectIdToEdit);\n  const [isValid, setValid] = useState({ name: true, number: true });\n  const { data: contacts } = useFetchContactsQuery();\n  const [addContact, { isLoading: isAdding }] = useAddContactMutation();\n  const [editContact, { isLoading: isEditing }] = useEditContactMutation();\n  const isLoading = isAdding || isEditing;\n  const dispatch = useDispatch();\n\n  const formVariant = {\n    new: 'new',\n    edit: 'edit',\n  };\n\n  const isNew = drawerVariant === formVariant.new;\n  const isEdit = drawerVariant === formVariant.edit;\n\n  const findContact = contactId => contacts.find(({ id }) => id === contactId);\n\n  const prevContact = useRef(isEdit ? findContact(contactId) : null);\n\n  const [name, setName] = useState(\n    contactId ? findContact(contactId).name : ''\n  );\n  const [number, setNumber] = useState(\n    contactId ? findContact(contactId).number : ''\n  );\n\n  const nameSchema = string()\n    .matches(/^[a-zA-Zа-яіїєґА-ЯІЇЄҐ]+([' -][a-zA-Zа-яіїєґА-ЯІЇЄҐ]*)*$/)\n    .max(35);\n\n  const numberSchema = string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n    )\n    .max(20);\n\n  const inputChangeHandler = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        nameSchema\n          .validate(value)\n          .then(() => setValid(prev => ({ ...prev, name: true })))\n          .catch(() => setValid(prev => ({ ...prev, name: false })));\n        setName(value);\n        break;\n      case 'number':\n        numberSchema\n          .validate(value)\n          .then(() => setValid(prev => ({ ...prev, number: true })))\n          .catch(() => setValid(prev => ({ ...prev, number: false })));\n        setNumber(value);\n        break;\n      default:\n        throw new Error('unsupported input name');\n    }\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    const {\n      name: { value: name },\n      number: { value: number },\n    } = e.currentTarget.elements;\n    if (!isValid.name) {\n      enqueueSnackbar('Please enter the correct name', {\n        variant: 'error',\n      });\n      return;\n    }\n    if (!isValid.number) {\n      enqueueSnackbar('Please enter the correct number', {\n        variant: 'error',\n      });\n      return;\n    }\n\n    const isExists = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    const isSame =\n      prevContact?.current?.name?.toLowerCase() === name.toLowerCase();\n    if (isExists && !isSame) {\n      enqueueSnackbar(`${name} is already in contacts`, {\n        variant: 'warning',\n      });\n      return;\n    }\n\n    if (isNew) {\n      addContact({ name, number })\n        .then(({ data }) => {\n          dispatch(closeDrawer());\n          enqueueSnackbar(`Contact ${data.name} added`, {\n            variant: 'success',\n          });\n        })\n        .catch(() =>\n          enqueueSnackbar('Something went wrong', {\n            variant: 'error',\n          })\n        );\n    }\n    if (isEdit) {\n      editContact([contactId, { name, number }])\n        .then(({ data }) => {\n          dispatch(closeDrawer());\n          enqueueSnackbar(`Contact ${data.name} edited`, {\n            variant: 'success',\n          });\n        })\n        .catch(() =>\n          enqueueSnackbar('Something went wrong', {\n            variant: 'error',\n          })\n        );\n    }\n  };\n\n  return (\n    <Container maxWidth=\"xs\" sx={{ my: 4 }}>\n      <Box\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          {isLoading ? (\n            <CircularProgress size={24} color=\"inherit\" />\n          ) : isEdit ? (\n            <EditIcon />\n          ) : (\n            <ContactPageIcon />\n          )}\n        </Avatar>\n        <Box\n          sx={{ textAlign: 'center' }}\n          component=\"form\"\n          onSubmit={submitHandler}\n        >\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            error={!isValid.name}\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            autoFocus\n            onChange={inputChangeHandler}\n          />\n          <TextField\n            fullWidth\n            margin=\"normal\"\n            label=\"Number\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            error={!isValid.number}\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={inputChangeHandler}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            sx={{ mt: 3, mb: 2 }}\n            disabled={isLoading}\n          >\n            {isNew ? 'Add new contact' : 'Save contact'}\n          </Button>\n        </Box>{' '}\n        <Button\n          type=\"button\"\n          fullWidth\n          variant=\"outlined\"\n          sx={{ mb: 2 }}\n          onClick={() => dispatch(closeDrawer())}\n        >\n          Cancel\n        </Button>\n      </Box>\n    </Container>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport {\n  ListItem,\n  IconButton,\n  ListItemAvatar,\n  Avatar,\n  ListItemText,\n  ListItemButton,\n  Box,\n  CircularProgress,\n  Tooltip,\n} from '@mui/material';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { enqueueSnackbar } from 'notistack';\n\nimport { openDrawerEdit } from '../redux/modalSlice';\nimport { useDeleteContactMutation } from '../redux/contactsApi';\n\nexport default function ContactItem({ name, number, id }) {\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem\n      sx={{ pr: '96px', pl: 0 }}\n      secondaryAction={\n        <Box sx={{ display: 'flex', gap: '10px' }}>\n          <Tooltip title=\"Edit\">\n            <IconButton\n              aria-label=\"edit\"\n              onClick={() => dispatch(openDrawerEdit(id))}\n            >\n              <EditIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete\">\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              disabled={isLoading}\n              onClick={() =>\n                deleteContact(id)\n                  .then(({ data }) => {\n                    enqueueSnackbar(`Contact ${data.name} deleted`, {\n                      variant: 'info',\n                    });\n                  })\n                  .catch(() =>\n                    enqueueSnackbar('Something went wrong', {\n                      variant: 'error',\n                    })\n                  )\n              }\n            >\n              {isLoading ? <CircularProgress size={24} /> : <DeleteIcon />}\n            </IconButton>\n          </Tooltip>\n        </Box>\n      }\n    >\n      <ListItemButton href={`tel:${number}`} sx={{ p: 0 }}>\n        <ListItemAvatar>\n          <Avatar>\n            <ContactPhoneIcon />\n          </Avatar>\n        </ListItemAvatar>\n        <ListItemText primary={`${name}`} secondary={`${number}`} />\n      </ListItemButton>\n    </ListItem>\n  );\n}\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { useSelector } from 'react-redux';\nimport { List } from '@mui/material';\n\nimport ContactItem from 'components/ContactItem';\nimport { useFetchContactsQuery } from '../redux/contactsApi';\nimport { selectFilter } from '../redux/selectors';\n\nexport default function ContactList() {\n  const { data = [] } = useFetchContactsQuery();\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = data.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactItem key={contact.id} {...contact} />\n      ))}\n    </List>\n  );\n}\n","import Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nexport default function Loader() {\n  return (\n    <Backdrop\n      open\n      sx={{ color: '#fff', zIndex: theme => theme.zIndex.drawer + 1 }}\n    >\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  );\n}","import { useSelector, useDispatch } from 'react-redux';\n\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\nimport { selectIsDialogOpen } from '../redux/selectors';\nimport { closeDialog, closeDrawer } from '../redux/modalSlice';\n\nexport default function AlertDialog() {\n  const isDrawerOpen = useSelector(selectIsDialogOpen);\n  const dispatch = useDispatch();\n\n  const closeAll = () => {\n    dispatch(closeDialog());\n    dispatch(closeDrawer());\n  };\n\n  return (\n    <Dialog\n      open={isDrawerOpen}\n      onClose={() => dispatch(closeDialog())}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n      <DialogTitle id=\"alert-dialog-title\">Are you sure?</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          Сlosing the window will delete unsaved data\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => dispatch(closeDialog())}>No</Button>\n        <Button onClick={closeAll} autoFocus>\n          Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  Fab,\n  Drawer,\n  Typography,\n  Container,\n  Alert,\n  AlertTitle,\n} from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\nimport useMediaQuery from '@mui/material/useMediaQuery';\n\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Loader from 'components/Loader';\nimport Dialog from 'components/Dialog';\n\nimport { openDrawerNew, closeDrawer, openDialog } from '../../redux/modalSlice';\nimport { useFetchContactsQuery } from '../../redux/contactsApi';\nimport { selectIsDrawerOpen } from '../../redux/selectors';\n\nexport default function ContactsPage() {\n  const isDrawerOpen = useSelector(selectIsDrawerOpen);\n  const dispatch = useDispatch();\n  const { data = [], isError, isLoading } = useFetchContactsQuery();\n  const isMobile = useMediaQuery('(max-width:786px)');\n\n  const handleAccidentalClicks = (_, reason) => {\n    if (reason === 'escapeKeyDown' || reason === 'backdropClick') {\n      dispatch(openDialog());\n      return;\n    }\n    dispatch(closeDrawer());\n  };\n\n  return (\n    <Container component=\"main\">\n      {isLoading && <Loader />}\n      {isError && (\n        <Alert severity=\"error\">\n          <AlertTitle>Error</AlertTitle>\n          Something went wrong. Please reload the page\n        </Alert>\n      )}\n      {!isLoading && !isError && data.length === 0 ? (\n        <Typography sx={{ mt: 4 }} align=\"center\" variant=\"h5\" paragraph>\n          Your phone book is empty. Please click the button in the lower right\n          corner and add new contacts.\n        </Typography>\n      ) : (\n        !isLoading &&\n        !isError && (\n          <>\n            <Typography align=\"center\" component=\"h1\" variant=\"h4\">\n              Contacts\n            </Typography>\n            <Filter />\n            <ContactList />\n          </>\n        )\n      )}\n      <Drawer\n        anchor={isMobile ? 'top' : 'bottom'}\n        open={isDrawerOpen}\n        ModalProps={{ onClose: handleAccidentalClicks }}\n      >\n        <ContactForm />\n      </Drawer>\n      <Fab\n        sx={{\n          position: 'fixed',\n          bottom: 16,\n          right: 16,\n        }}\n        color=\"primary\"\n        aria-label=\"add\"\n        onClick={() => dispatch(openDrawerNew())}\n      >\n        <AddIcon />\n      </Fab>\n      <Dialog />\n    </Container>\n  );\n}\n"],"names":["ContactForm","drawerVariant","useSelector","selectDrawerVariant","contactId","selectIdToEdit","_useState","useState","name","number","_useState2","_slicedToArray","isValid","setValid","contacts","useFetchContactsQuery","data","_useAddContactMutatio","useAddContactMutation","_useAddContactMutatio2","addContact","isAdding","isLoading","_useEditContactMutati","useEditContactMutation","_useEditContactMutati2","editContact","isEditing","dispatch","useDispatch","isNew","isEdit","findContact","find","_ref","id","prevContact","useRef","_useState3","_useState4","setName","_useState5","_useState6","setNumber","nameSchema","string","matches","max","numberSchema","inputChangeHandler","e","_e$currentTarget","currentTarget","value","validate","then","prev","_objectSpread","catch","Error","_jsx","Container","maxWidth","sx","my","children","_jsxs","Box","display","flexDirection","alignItems","Avatar","m","bgcolor","CircularProgress","size","color","EditIcon","ContactPageIcon","textAlign","component","onSubmit","_prevContact$current","_prevContact$current$","preventDefault","_e$currentTarget$elem","elements","isExists","some","contact","toLowerCase","isSame","current","_ref2","closeDrawer","enqueueSnackbar","concat","variant","_ref3","TextField","fullWidth","margin","label","type","error","title","required","autoFocus","onChange","Button","mt","mb","disabled","onClick","ContactItem","_useDeleteContactMuta","useDeleteContactMutation","_useDeleteContactMuta2","deleteContact","ListItem","pr","pl","secondaryAction","gap","Tooltip","IconButton","openDrawerEdit","edge","DeleteIcon","ListItemButton","href","p","ListItemAvatar","ContactPhoneIcon","ListItemText","primary","secondary","ContactList","_useFetchContactsQuer2","filter","selectFilter","visibleContacts","includes","List","map","Loader","Backdrop","open","zIndex","theme","drawer","AlertDialog","isDrawerOpen","selectIsDialogOpen","Dialog","onClose","closeDialog","DialogTitle","DialogContent","DialogContentText","DialogActions","ContactsPage","selectIsDrawerOpen","_useFetchContactsQuer","isError","isMobile","useMediaQuery","Alert","severity","AlertTitle","length","_Fragment","Typography","align","Filter","paragraph","Drawer","anchor","ModalProps","_","reason","openDialog","Fab","position","bottom","right","openDrawerNew","AddIcon"],"sourceRoot":""}